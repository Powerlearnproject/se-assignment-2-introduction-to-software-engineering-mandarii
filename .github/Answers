Software engineering refers to the application of scientific knowledge to design and develop software. While software engineering focuses more on software design and development traditional programming focuses on construction part of the software.

The phases of Software Development Life Cycle include: Requirements; finding the user needs and the system requirements. Design; creating detailed designs of the software and user interface including also making prototypes. Implementation; this is where the  team members divide the project into software modules and  are also able to turn the software requirements into code.Testing; this is the part where the software is tested to make sure it works the way it should e.g perfomance testing. Deployment; the final product is delivered to the intended user. Maintenance; this is the final stage of the Software Development Life Cycle such as updates and enhancements after deployment.   

Agile and Waterfall models: The Waterfall model follows a sequence where a phase cannot begin unless the last one has been completed. The Agile model on the other hand is comprised of iterative and incremental models, there is room for adaptability. The documentation forWaterfall method is comprehensive while the one for Agile is lightweight and produced as needed. The Waterfall model is designed for long-term projects with predetermined deadlines. Agile allows for adjustion of plans over time and therefore achievements in shorter time frames.      https://www.simplilearn.com, https://www.geeksforgeeks.org/waterfall-vs-agile-software-development-model/

Requirements engineering: refers to the art of defining and designing software systems based on user needs and goals. The process includes; Feasibility Study:The initial phase assesses whether the project should proceed.Helps stakeholders understand practical aspects and set budgets efficiently. Requirement Elicitation and Analysis: Involves gathering detailed functional and non-functional requirements from stakeholders.It is important because this is where the users incomplete needs and wishes are translated into complete, precise specifications.   https://www.techrepublic.com/resource-library/whitepapers/the-role-of-requirement-engineering-in-software-development-life-cycle/#:~:text=The%20Role%20of%20Requirement%20Engineering%20in%20Software%20Development,of%20software%20into%20complete%2C%20precise%20and%20formal%20specifications.

Concept of modularity in software design refers to the breakdown of a system into smaller components called modules. It helps make the code more organized, reusable, and maintainable. It allows for parallel development and enhances collaboration among team members. If changes are needed, they can be made to individual modules without impacting the entire system.  https://www.lenovo.com/us/en/glossary/modularity/

Different levels of software testing (unit testing, integration testing, system testing, acceptance testing)  Unit Testing:  refers to the testing of different individual functions to make sure they are working correctly in isolation. Integration Testing:is the testing of interactions between  the different components to verify their combined functionality. System Testing: refers to testing the entire  system to ensure it meets the expected requirements and functions.  Acceptance Testing:  is the testing by end-users to validate that the software meets their needs. Testing is important because it helps identify and fix defects early in the development process.        https://www.impactqa.com/guides/levels-of-software-testing/

Version Control Systems are software that help track changes make in code over time. They are important because  they track changes in code over time, ensure code integrity. Examples are Git which supports branching , Mercurial which is lightweight and easy to use.  https://blog.logrocket.com/product-management/version-control-systems-definition-types/

 Roles of a project manager:  Project Estimation, Scheduling, Staffing, Risk Mnagement,Miscellaneous Plans.  https://www.geeksforgeeks.org/software-engineering-role-and-responsibilities-of-a-software-project-manager/

It refers to modifying and updating software after deployment. It involves, Corrective maintenance: Fixing defects or errors.  Adaptive maintenance: Modifying software to adapt to changes in the environment. Perfective maintenance: Enhancing software to improve performance or add new features. Preventive maintenance: Proactively addressing potential issues before they become problems. Maintenance is essential because it ensures software remains reliable, secure, and up-to-date throughout its lifetime.  https://www.computer.org/resources/software-maintenance

Ethical considerations.   Unethical data collection, Algorithmic bias, Weak Security, Wrong Priorities. We can counter these issues by being accountable and being honest.    https://fullscale.io/blog/ethical-issues-in-software-development/     